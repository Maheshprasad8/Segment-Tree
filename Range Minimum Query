Given an array A[ ] and its size N your task is to complete two functions  a constructST  function which builds the segment tree  and 
a function RMQ which finds range minimum query in a range [a,b] of the given array.

Input:
The task is to complete two functions constructST and RMQ.
The constructST function builds the segment tree and takes two arguments the array A[ ] and the size of the array N.
It returns a pointer to the first element of the segment tree array.
The RMQ function takes 4 arguments the first being the segment tree st constructed, second being the size N and then third and
forth arguments are the range of query a and b. The function RMQ returns the min of the elements in the array from index range a and b. There are multiple test cases. For each test case, this method will be called individually.

Output:
The function RMQ should return the min element in the array from range a to b.
...............................................................................void builtSegmentTree(int i,int l,int r,int segmentTree[],int arr[]){
    if(l==r){
        segmentTree[i]=arr[l];
        return;
    }
    int mid=l+(r-l)/2;
    builtSegmentTree(2*i+1,l,mid,segmentTree,arr);
    builtSegmentTree(2*i+2,mid+1,r,segmentTree,arr);
    segmentTree[i]=min(segmentTree[2*i+1],segmentTree[2*i+2]);
}
int *constructST(int arr[],int n)
{
 int *segmentTree=new int[4*n];
 builtSegmentTree(0,0,n-1,segmentTree,arr);
 return segmentTree;
}

int Query(int start,int end,int i,int l,int r,int segmentTree[]){
    if(l>end || r<start){
        return INT_MAX;
    }
    if(l>=start && r<=end){
        return segmentTree[i];
    }
    int mid=l+(r-l)/2;
    return min(Query(start,end,2*i+1,l,mid,segmentTree),
    Query(start,end,2*i+2,mid+1,r,segmentTree));
}

/* The functions returns the
 min element in the range
 from a and b */
int RMQ(int st[] , int n, int a, int b)
{
return Query(a,b,0,0,n-1,st);
}

